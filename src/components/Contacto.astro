---
import i18next, { t } from "i18next";
---
<div class="p-10 bg-white" id="CONTACTO">
    <h1 class="text-2xl font-bold text-center mb-8 text-gray-900">{t("contacto.title")}</h1>
    <form class="max-w-4xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-6" action="https://formsubmit.co/e4648f94b2f9c0bbd8146b36ea8498e0" method="POST">
        <!-- Nombre -->
        <div>
            <label for="nombre" class="block text-sm font-medium text-gray-900">Nombre *</label>
            <input type="text" id="nombre" name="nombre" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm p-2.5" placeholder="Ingresa tu nombre" />
        </div>

        <!-- Apellidos -->
        <div>
            <label for="apellidos" class="block text-sm font-medium text-gray-900">Apellidos *</label>
            <input type="text" id="apellidos" name="apellidos" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm p-2.5" placeholder="Ingresa tus apellidos" />
        </div>

        <!-- Número telefónico -->
        <div>
            <label for="telefono" class="block text-sm font-medium text-gray-900">Número telefónico *</label>
            <input type="tel" id="telefono" name="telefono" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm p-2.5" placeholder="Ingresa tu teléfono" />
        </div>

        <!-- Correo -->
        <div>
            <label for="correo" class="block text-sm font-medium text-gray-900">Correo *</label>
            <input type="email" id="correo" name="correo" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm p-2.5" placeholder="Ingresa tu correo electrónico" />
        </div>

        <!-- País -->
        <div>
            <label for="pais" class="block text-sm font-medium text-gray-900">País *</label>
            <select id="pais" name="pais" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm p-2.5"></select>
        </div>

        <!-- Estado -->
        <div>
            <label for="estado" class="block text-sm font-medium text-gray-900">Estado *</label>
            <select id="estado" name="estado" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm p-2.5"></select>
        </div>

        <!-- Ciudad -->
        <div>
            <label for="ciudad" class="block text-sm font-medium text-gray-900">Ciudad *</label>
            <select id="ciudad" name="ciudad" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm p-2.5"></select>
        </div>

        <!-- Interés -->
        <div>
            <label for="interes" class="block text-sm font-medium text-gray-900">¿Estás interesado? *</label>
            <select id="interes" name="interes" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm p-2.5">
                <option value="">Selecciona</option>
                <option value="Residencias">Residencias</option>
                <option value="Departamentos">Departamentos</option>
                <option value="Terrenos">Terrenos</option>
            </select>
        </div>

        <!-- Presupuesto -->
        <div>
            <label for="presupuesto" class="block text-sm font-medium text-gray-900">¿Cuál es tu presupuesto aproximado? *</label>
            <select id="presupuesto" name="presupuesto" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm p-2.5">
                <option value="">Selecciona</option>
                <option value="<4M">Menos de 4M</option>
                <option value=">4M">Más de 4M</option>
            </select>
        </div>

        <!-- Broker -->
        <div>
            <label for="broker" class="block text-sm font-medium text-gray-900">¿Eres broker?</label>
            <select id="broker" name="broker" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm p-2.5">
                <option value="">Selecciona</option>
                <option value="si">Sí</option>
                <option value="no">No</option>
            </select>
        </div>

        <!-- Botón de enviar -->
        <div class="md:col-span-2 flex justify-center">
            <button type="submit" class="text-white bg-red-800 hover:bg-red-900 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-6 py-2.5 text-center">Enviar</button>
        </div>
    </form>
</div>

<script>
    // Definir tipos para los datos JSON
    interface Pais {
        id: number;
        name: string;
    }

    interface Estado {
        id: number;
        id_country: number;
        name: string;
    }

    interface Ciudad {
        id: number;
        id_state: number;
        name: string;
    }

    // Función para cargar los datos desde los archivos JSON
    async function cargarDatos() {
        const paises = document.getElementById("pais") as HTMLSelectElement | null;
        const estados = document.getElementById("estado") as HTMLSelectElement | null;
        const ciudades = document.getElementById("ciudad") as HTMLSelectElement | null;

        if (!paises || !estados || !ciudades) {
            console.error("Error: No se encontraron algunos elementos del DOM.");
            return;
        }

        // Cargar países desde el archivo JSON
        const cargarPaises = async () => {
            try {
                const respuesta = await fetch('/Lugares/countries.json');
                const datos: { countries: Pais[] } = await respuesta.json();
                paises.innerHTML = '<option value="">Selecciona</option>';
                datos.countries.forEach((pais: Pais) => {
                    paises.innerHTML += `<option value="${pais.id}">${pais.name}</option>`;
                });
            } catch (error) {
                console.error("Error al cargar los países:", error);
            }
        };

        // Cargar estados desde el archivo JSON
        const cargarEstados = async (paisSeleccionado: string) => {
            try {
                const respuesta = await fetch('/Lugares/states.json');
                const datos: { states: Estado[] } = await respuesta.json();
                estados.innerHTML = '<option value="">Selecciona</option>';
                const estadosFiltrados = datos.states.filter((estado: Estado) => estado.id_country === parseInt(paisSeleccionado));
                estadosFiltrados.forEach((estado: Estado) => {
                    estados.innerHTML += `<option value="${estado.id}">${estado.name}</option>`;
                });
            } catch (error) {
                console.error("Error al cargar los estados:", error);
            }
        };

        // Cargar ciudades desde el archivo JSON
        const cargarCiudades = async (estadoSeleccionado: string) => {
            try {
                const respuesta = await fetch('/Lugares/cities.json');
                const datos: { cities: Ciudad[] } = await respuesta.json();
                ciudades.innerHTML = '<option value="">Selecciona</option>';
                const ciudadesFiltradas = datos.cities.filter((ciudad: Ciudad) => ciudad.id_state === parseInt(estadoSeleccionado));
                ciudadesFiltradas.forEach((ciudad: Ciudad) => {
                    ciudades.innerHTML += `<option value="${ciudad.id}">${ciudad.name}</option>`;
                });
            } catch (error) {
                console.error("Error al cargar las ciudades:", error);
            }
        };

        // Cargar países al inicio
        await cargarPaises();

        // Cargar estados cuando se seleccione un país
        paises.addEventListener("change", async () => {
            const paisSeleccionado = paises.value;
            await cargarEstados(paisSeleccionado);
            ciudades.innerHTML = '<option value="">Selecciona</option>'; // Limpiar ciudades
        });

        // Cargar ciudades cuando se seleccione un estado
        estados.addEventListener("change", async () => {
            const estadoSeleccionado = estados.value;
            await cargarCiudades(estadoSeleccionado);
        });
    }

    // Ejecutar cuando el DOM esté completamente cargado
    document.addEventListener("DOMContentLoaded", cargarDatos);
</script>